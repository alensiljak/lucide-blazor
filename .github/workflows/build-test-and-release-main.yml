name: build, test and release main branch

on:
  workflow_dispatch:

#on:
#  push:
#    branches: [ "main" ]
#    paths: 
#      - lucide
#      - src

env:
  VERSION: "${{ vars.RELEASE_VERSION_MAJOR }}.${{ vars.RELEASE_VERSION_MINOR }}.${{ vars.RELEASE_VERSION_PATCH }}"
  OWNER: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
    - name: Checkout lucide
      working-directory: lucide
      run: |
        git submodule update --init --recursive --remote
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      working-directory: src
      run: dotnet restore
    - name: Build
      working-directory: src
      run: dotnet build --no-restore
    - name: Test
      working-directory: src
      run: dotnet test --no-build --verbosity normal
    - name: Pack
      working-directory: src
      run: dotnet pack Lucide.Blazor/Lucide.Blazor.csproj --configuration Release --output $PWD /p:Version=$VERSION
    - name: Publish
      working-directory: src
      run: dotnet nuget push Lucide.Blazor.$VERSION.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/$OWNER/index.json
    - name: Release
      uses: "actions/github-script@v6"
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: `v${process.env.VERSION}`,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              make_latest: true
            });
